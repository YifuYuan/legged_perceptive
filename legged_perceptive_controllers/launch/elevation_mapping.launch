<launch>
    <arg name="manager" default="point_cloud_manager"/>

    <node pkg="nodelet" type="nodelet" name="$(arg manager)" args="manager"
          output="screen"/>

    <rosparam command="load" file="$(find legged_perceptive_controllers)/config/body_filter.yaml"/>

    <!-- <node pkg="nodelet" type="nodelet" name="livox_right_filter"
          args="load sensor_filters/pointcloud2_filter_chain $(arg manager)">
        <remap from="~input" to="/livox/lidar_192_168_8_101"/>
        <remap from="~output" to="/livox/right"/>
    </node>

    <node pkg="nodelet" type="nodelet" name="livox_left_filter"
          args="load sensor_filters/pointcloud2_filter_chain $(arg manager)">
        <remap from="~input" to="/livox/lidar_192_168_8_102"/>
        <remap from="~output" to="/livox/left"/>
    </node> -->

    <!-- Elevation mapping node -->
    <node pkg="elevation_mapping" type="elevation_mapping" name="elevation_mapping" output="screen">
        <rosparam command="load" file="$(find legged_perceptive_controllers)/config/elevation_mapping.yaml"/>
    </node>

    <!-- Run a passthrough filter to down-sample the sensor point cloud.-->
  <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen"/>
  <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
    <remap from="~input" to="/front_camera/depth/color/points"/>
    <remap from="~output" to="/front_camera/depth/color/points_downsampled"/>
    <rosparam>
      filter_field_name: z
      filter_limit_min: 0.01
      filter_limit_max: 1.5  <!-- Limit the range of points to forward to 6 meters in viewing direction-->
      filter_limit_negative: False
      leaf_size: 0.02  <!-- Limit the density to 5 cm-->
    </rosparam>
  </node>

    <include file="$(find convex_plane_decomposition_ros)/launch/convex_plane_decomposition.launch">
        <arg name="parameter_file"
             value="$(find legged_perceptive_controllers)/config/convex_plane_decomposition.yaml"/>
    </include>

    <node pkg="tf2_ros" type="static_transform_publisher" name="odom_tf_publisher"
          args="0 0 0 0 0 0 1 map odom"/>
</launch>
